sql_querry_init_db = """
    CREATE TABLE IF NOT EXISTS data (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name_lk TEXT NOT NULL,
        count_errors INTEGER,
        type_test TEXT 
    )   
"""

sql_querry_init_lk = """
    CREATE TABLE IF NOT EXISTS lk (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name_lk TEXT NOT NULL,
        letter TEXT NOT NULL,
        error INTEGER,
        finger TEXT DEFAULT NULL
    ) 
"""

sql_querry_init_finger_stats = """
    CREATE TABLE IF NOT EXISTS finger_statistics (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        analysis_id INTEGER NOT NULL,
        finger_code TEXT NOT NULL,
        press_count INTEGER NOT NULL,
        FOREIGN KEY (analysis_id) REFERENCES data (id) ON DELETE CASCADE
    )
"""

import sqlite3

def init_tables():
    """
    –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, —Ç–æ –æ–Ω —Å–æ–∑–¥–∞—Å—Ç —Ç—Ä–∏ —Ç–∞–±–ª–∏—á–∫–∏ - –æ–¥–Ω—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—Å—á–µ—Ç–æ–≤, 
    –≤—Ç–æ—Ä—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–∫ –∏ —Ç—Ä–µ—Ç—å—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–∞–ª—å—Ü–∞–º.
    """

    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    cursor.execute(f"{sql_querry_init_lk}")
    cursor.execute(f"{sql_querry_init_db}")
    cursor.execute(f"{sql_querry_init_finger_stats}")

    conn.commit()
    conn.close()

def make_mok_data(start_letter: str, name_test_lk: str):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥, –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()

    for i in range(26):
        cursor.execute("insert into lk (name_lk, letter, error) VALUES (?, ?, ?)",
                       (f"{name_test_lk}", f"{chr(ord(f"{start_letter}") + i)}", i))

    for i in range(10):
        cursor.execute("insert into lk (name_lk, letter, error) VALUES (?, ?, ?)",
                       (f"{name_test_lk}", f"{chr(ord(f"1") + i)}", i))

    conn.commit()
    conn.close()

    print("add test data in database")


def migrate_database():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    """
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ finger –≤ —Ç–∞–±–ª–∏—Ü–µ lk
        cursor.execute("PRAGMA table_info(lk)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'finger' not in columns:
            print("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'finger' –≤ —Ç–∞–±–ª–∏—Ü—É lk...")
            cursor.execute("ALTER TABLE lk ADD COLUMN finger TEXT DEFAULT NULL")
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'finger' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É finger_statistics –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute(sql_querry_init_finger_stats)
        
        conn.commit()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
    finally:
        conn.close()