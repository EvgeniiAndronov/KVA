Установка и настройка
====================

Системные требования
--------------------

* Python 3.13 или выше
* SQLite3 (обычно входит в состав Python)
* Операционная система: Windows, macOS, Linux

Установка зависимостей
---------------------

1. Клонируйте репозиторий или скачайте исходный код
2. Перейдите в директорию проекта
3. Установите зависимости:

.. code-block:: bash

   pip install -r requirements.txt

Или с использованием uv:

.. code-block:: bash

   uv sync

Зависимости
-----------

Проект использует следующие библиотеки: диана

* **matplotlib** (>=3.10.6) - для создания графиков и диаграмм.
 Достаточно мощная и гибкая библиотека для визуализации данных в Python, 
 которая считается стандартом для создания статических, анимированных и интерактивных визуализаций.
   
   Почему Matplotlib?
1. Он обладает всесторонней функциональностью
Matplotlib поддерживает невероятно широкий спектр типов визуализаций:
Линейные графики (line plots)
Точечные диаграммы (scatter plots)
Гистограммы и столбчатые диаграммы
Круговые диаграммы (pie charts)
Контурные графики и градиентные поля
Трехмерные визуализации (через toolkit mplot3d)
2. Matplotlib позволяет создавать графики высокого качества, 
а также поддерживает экспорт в различные форматы (PNG, PDF, SVG, EPS, JPEG) с контролем разрешения (DPI) и размера.
3. При необходимости функционал Matplotlib можно расширить большим количеством специально созданных для него пакетов и расширений
Из альтернативных вариантов мы рассмотрели:Plotly
-Она фокусируется на интерактивных и веб-ориентированных визуализациях, но Matplotlib,
 оказался проще в освоении и удобнее при использовании не интерактивных графиков.
* **pytest** (>=8.4.2) - для тестирования
* **sphinx** (>=8.2.3) - для генерации документации
* **sphinx-rtd-theme** (>=3.0.2) - тема для документации
* **tqdm** (>=4.67.1) - для отображения прогресс-баров
   Почему TQDM?
1. Простота и удобство использования
2. Минимальная нагрузка на выполнение кода
3. tqdm корректно работает в различных средах и графических интерфейсах.
4. Гибкая настройка отображения и кастомизации

Альтернативные варианты, которые мы рассматривали:
Progressbar2
TQDM  предлагает более простой синтаксис и лучшее быстродействие по сравнению с progressbar2.

Alive-progres
В отличие от alive-progress с богатыми анимациями,TQDM предоставляет минималистичный и производительный подход,
 что лучше подходит для наших задач.


Первый запуск
-------------

При первом запуске программа автоматически:

1. Создаст базу данных SQLite (``database.db``)
2. Инициализирует необходимые таблицы
3. Добавит тестовые данные

Структура проекта
----------------

.. code-block::

   kva/
   ├── main.py                    # Главный файл программы
   ├── data_module/               # Модуль экспорта данных
   ├── database_module/           # Модуль работы с БД
   ├── processing_module/         # Модуль обработки текстов
   ├── scan_module/              # Модуль чтения файлов
   ├── tests_module/             # Модуль тестов
   ├── output_data/              # Выходные данные
   ├── example_layouts/          # Примеры раскладок
   ├── docs/                     # Документация
   └── requirements.txt          # Зависимости