from enum import Enum
from typing import Optional
import sys
from datetime import datetime

from database_module.db_init import init_tables, make_mok_data
from database_module.database import (
    take_lk_from_db, 
    take_all_data_from_lk, 
    take_lk_names_from_lk,
    save_analysis_result,
    get_analysis_history,
    get_analysis_statistics
)
from scan_module.read_files import (
    get_words_from_file, 
    get_words_from_file_stream, 
    get_text_from_file,
    get_text_from_file_stream,
    get_file_size_mb,
    count_lines_in_file,
    count_characters_in_file
)
from processing_module.calculate_data import (
    make_processing, 
    make_processing_stream,
    make_text_processing,
    make_text_processing_stream,
    validate_rules
)
from data_module.make_export_file import create_csv_report, export_unknown_characters_csv
from data_module.make_export_plot import (
    create_analysis_charts, 
    create_history_comparison_chart, 
    create_layouts_comparison_chart
)
from output_data.console_strings import *
from scan_module.read_layout import read_kl


class MenuAction(Enum):
    """–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–µ–Ω—é"""
    EXIT = 0
    BACK = -1
    CONTINUE = 1


class MenuSystem:
    """–°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.current_layout = None
        self.current_layout_name = None
    
    def get_user_choice(self, prompt: str = "--> ", min_val: int = 0, max_val: int = None) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —á–∏—Å–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        while True:
            try:
                choice = int(input(prompt))
                if choice < min_val:
                    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ {min_val}")
                    continue
                if max_val is not None and choice > max_val:
                    print(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ {max_val}")
                    continue
                return choice
            except ValueError:
                print(error_input_data)
            except KeyboardInterrupt:
                print("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
                sys.exit(0)
    
    def confirm_action(self, message: str) -> bool:
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        while True:
            response = input(f"{message} (y/n): ").lower().strip()
            if response in ['y', 'yes', '–¥–∞', '–¥']:
                return True
            elif response in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                return False
            else:
                print("–í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    
    def display_menu_header(self, title: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–µ–Ω—é"""
        print("\n" + "="*50)
        print(f" {title}")
        print("="*50)
    
    def main_menu(self) -> MenuAction:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        self.display_menu_header("–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
        print(rat_img_msg)
        print("1) –í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("0) –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        
        choice = self.get_user_choice(max_val=1)
        
        if choice == 0:
            return MenuAction.EXIT
        elif choice == 1:
            return self.layout_selection_menu()
        
        return MenuAction.CONTINUE
    
    def layout_selection_menu(self) -> MenuAction:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏"""
        self.display_menu_header("–í–´–ë–û–† –†–ê–°–ö–õ–ê–î–ö–ò")
        
        layouts = take_lk_names_from_lk()
        if not layouts:
            print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return MenuAction.CONTINUE
        
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏:")
        for i, layout in enumerate(layouts, 1):
            status = "‚úÖ (–≤—ã–±—Ä–∞–Ω–∞)" if self.current_layout_name == layout[0] else ""
            print(f"{i}) {layout[0]} {status}")
        
        print("0) –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        choice = self.get_user_choice(max_val=len(layouts))
        
        if choice == 0:
            return MenuAction.CONTINUE
        
        selected_layout_name = layouts[choice - 1][0]
        selected_layout = take_lk_from_db(selected_layout_name)
        
        if selected_layout is None:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∏–∑ –ë–î")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return MenuAction.CONTINUE
        
        try:
            validate_rules(selected_layout)
            self.current_layout = selected_layout
            self.current_layout_name = selected_layout_name
            print(f"‚úÖ –†–∞—Å–∫–ª–∞–¥–∫–∞ '{selected_layout_name}' –≤—ã–±—Ä–∞–Ω–∞")
            
            return self.file_processing_menu()
            
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∏: {e}")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return MenuAction.CONTINUE
    
    def file_processing_menu(self) -> MenuAction:
        """–ú–µ–Ω—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        if not self.current_layout:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É")
            return MenuAction.CONTINUE
        
        self.display_menu_header(f"–û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í - {self.current_layout_name}")
        print("1) –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–æ —Å–ª–æ–≤–∞–º–∏ (–ø–æ—Å—Ç—Ä–æ—á–Ω–æ)")
        print("2) –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (—Å–ø–ª–æ—à–Ω–æ–π —Ç–µ–∫—Å—Ç)")
        print("3) –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
        print("4) –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        print("5) –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É –∏–∑ —Ñ–∞–π–ª–∞")
        print("6) –°–º–µ–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É")
        print("0) –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        choice = self.get_user_choice(max_val=6)
        
        if choice == 0:
            return MenuAction.CONTINUE
        elif choice == 1:
            self.process_word_file()
        elif choice == 2:
            self.process_text_file()
        elif choice == 3:
            self.show_analysis_history()
        elif choice == 4:
            self.create_comparison_charts()
        elif choice == 5:
            self.load_layout_from_file()
        elif choice == 6:
            self.current_layout = None
            self.current_layout_name = None
            return self.layout_selection_menu()
        
        return MenuAction.CONTINUE
    
    def process_word_file(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏"""
        print("\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏")
        file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ").strip()
        
        if not file_path:
            print("‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        try:
            file_size = get_file_size_mb(file_path)
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} MB")
            
            if file_size > 50:
                if not self.confirm_action(f"‚ö†Ô∏è  –§–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ({file_size:.1f}MB). –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
                    print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return
            
            if file_size > 10:
                self._process_large_file(file_path, file_size)
            else:
                self._process_small_file(file_path)
                
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _process_large_file(self, file_path: str, file_size: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Ç–æ–∫–æ–≤–æ"""
        print(f"üîÑ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({file_size:.1f}MB). –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        print("üìä –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤...")
        total_words = count_lines_in_file(file_path)
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {total_words:,} —Å–ª–æ–≤")
        
        if total_words > 1000000:
            if not self.confirm_action(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {total_words:,} —Å–ª–æ–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
                print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        try:
            word_generator = get_words_from_file_stream(file_path, batch_size=5000)
            result = make_processing_stream(word_generator, self.current_layout, total_words)
            self._display_detailed_results(result, file_path)
            
        except KeyboardInterrupt:
            print("\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def _process_small_file(self, file_path: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞"""
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å...")
        words = get_words_from_file(file_path)
        print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words):,} —Å–ª–æ–≤")
        
        result = make_processing(words, self.current_layout)
        self._display_detailed_results(result, file_path)
    
    def _display_detailed_results(self, result: dict, file_path: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print(f"\n{'='*70}")
        print(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –†–ê–°–ö–õ–ê–î–ö–ò")
        print(f"{'='*70}")
        print(f"üìÅ –§–∞–π–ª: {file_path}")
        print(f"‚å®Ô∏è  –†–∞—Å–∫–ª–∞–¥–∫–∞: {self.current_layout_name}")
        print(f"{'='*70}")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ª–æ–≤: {result['total_words']:,}")
        print(f"üî§ –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {result['total_characters']:,}")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {result['processed_characters']:,}")
        print(f"‚ùå –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {result['total_errors']:,}")
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –æ—à–∏–±–æ–∫ –Ω–∞ —Å–ª–æ–≤–æ: {result['avg_errors_per_word']:.2f}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –æ—à–∏–±–æ–∫ –Ω–∞ —Å–∏–º–≤–æ–ª: {result['avg_errors_per_char']:.4f}")
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
        if result['total_characters'] > 0:
            coverage = (result['processed_characters'] / result['total_characters']) * 100
            print(f"   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π: {coverage:.1f}%")
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if result['unknown_characters']:
            print(f"\n‚ö†Ô∏è  –ù–ï–ò–ó–í–ï–°–¢–ù–´–ï –°–ò–ú–í–û–õ–´ ({len(result['unknown_characters'])} —à—Ç.):")
            unknown_list = sorted(list(result['unknown_characters']))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤
            display_chars = unknown_list[:20]
            print(f"   {', '.join(repr(char) for char in display_chars)}")
            if len(unknown_list) > 20:
                print(f"   ... –∏ –µ—â–µ {len(unknown_list) - 20} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print(f"\nüèÜ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
        if result['avg_errors_per_word'] < 2:
            print("   ‚úÖ –û–¢–õ–ò–ß–ù–û - –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫!")
        elif result['avg_errors_per_word'] < 5:
            print("   üü¢ –•–û–†–û–®–û - –ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫")
        elif result['avg_errors_per_word'] < 10:
            print("   üü° –°–†–ï–î–ù–ï - –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            print("   üî¥ –ü–õ–û–•–û - –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫")
        
        print(f"{'='*70}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._offer_save_and_export(result, file_path)
    
    def process_text_file(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (—Å–ø–ª–æ—à–Ω–æ–π —Ç–µ–∫—Å—Ç)"""
        print("\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
        file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ").strip()
        
        if not file_path:
            print("‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        try:
            file_size = get_file_size_mb(file_path)
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} MB")
            
            if file_size > 50:
                if not self.confirm_action(f"‚ö†Ô∏è  –§–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ({file_size:.1f}MB). –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
                    print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return
            
            if file_size > 10:
                self._process_large_text_file(file_path, file_size)
            else:
                self._process_small_text_file(file_path)
                
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _process_large_text_file(self, file_path: str, file_size: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Ç–æ–∫–æ–≤–æ"""
        print(f"üîÑ –ë–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ({file_size:.1f}MB). –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        print("üìä –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤...")
        total_chars = count_characters_in_file(file_path)
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if total_chars > 10000000:  # 10 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
            if not self.confirm_action(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
                print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        try:
            text_generator = get_text_from_file_stream(file_path, chunk_size=16384)
            result = make_text_processing_stream(text_generator, self.current_layout, total_chars)
            self._display_detailed_results(result, file_path)
            
        except KeyboardInterrupt:
            print("\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def _process_small_text_file(self, file_path: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–∞–º—è—Ç—å...")
        text = get_text_from_file(file_path)
        print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(text):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        result = make_text_processing(text, self.current_layout)
        self._display_detailed_results(result, file_path)
    
    def _offer_save_and_export(self, result: dict, file_path: str):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"""
        print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –≠–ö–°–ü–û–†–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("1) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("2) –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV")
        print("3) –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        print("4) –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ CSV")
        print("5) –í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ")
        print("0) –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        
        choice = self.get_user_choice(max_val=5)
        
        if choice == 0:
            return
        
        analysis_type = result.get('text_type', 'words')
        
        if choice in [1, 5]:
            try:
                record_id = save_analysis_result(
                    self.current_layout_name, 
                    result, 
                    file_path, 
                    analysis_type
                )
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î (ID: {record_id})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        
        if choice in [2, 5]:
            try:
                csv_path = create_csv_report(result, file_path, self.current_layout_name)
                print(f"‚úÖ CSV –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {csv_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV: {e}")
        
        if choice in [3, 5]:
            try:
                chart_paths = create_analysis_charts(result, self.current_layout_name, file_path)
                if chart_paths:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏:")
                    for path in chart_paths:
                        print(f"   üìä {path}")
                else:
                    print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        
        if choice in [4, 5] and result['unknown_characters']:
            try:
                chars_csv_path = export_unknown_characters_csv(
                    result['unknown_characters'], 
                    self.current_layout_name
                )
                print(f"‚úÖ CSV —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ —Å–æ–∑–¥–∞–Ω: {chars_csv_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
    
    def show_analysis_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤"""
        self.display_menu_header(f"–ò–°–¢–û–†–ò–Ø –ê–ù–ê–õ–ò–ó–û–í - {self.current_layout_name}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = get_analysis_statistics(self.current_layout_name)
            print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total_tests']}")
            if stats['total_tests'] > 0:
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –æ—à–∏–±–æ–∫: {stats['avg_errors']:.2f}")
                print(f"   ‚Ä¢ –ú–∏–Ω–∏–º—É–º –æ—à–∏–±–æ–∫: {stats['min_errors']}")
                print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫: {stats['max_errors']}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = get_analysis_history(self.current_layout_name, limit=20)
            
            if not history:
                print("\n‚ùå –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—É—Å—Ç–∞")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return
            
            print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï {len(history)} –ê–ù–ê–õ–ò–ó–û–í:")
            print(f"{'ID':<5} {'–û—à–∏–±–∫–∏':<10} {'–¢–∏–ø':<15} {'–§–∞–π–ª'}")
            print("-" * 70)
            
            for record in history:
                record_id, layout_name, errors, test_type = record
                
                # –ü–∞—Ä—Å–∏–º —Ç–∏–ø —Ç–µ—Å—Ç–∞
                parts = test_type.split('|')
                analysis_type = parts[0] if len(parts) > 0 else 'unknown'
                file_name = parts[1].split('/')[-1] if len(parts) > 1 else 'unknown'
                
                print(f"{record_id:<5} {errors:<10} {analysis_type:<15} {file_name[:40]}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def create_comparison_charts(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
        self.display_menu_header("–°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–û–í")
        print("1) –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ —Ç–µ–∫—É—â–µ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏")
        print("2) –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫")
        print("0) –ù–∞–∑–∞–¥")
        
        choice = self.get_user_choice(max_val=2)
        
        if choice == 0:
            return
        
        try:
            if choice == 1:
                chart_path = create_history_comparison_chart(self.current_layout_name)
                if chart_path:
                    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω: {chart_path}")
                else:
                    print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
            
            elif choice == 2:
                chart_path = create_layouts_comparison_chart()
                if chart_path:
                    print(f"‚úÖ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω: {chart_path}")
                else:
                    print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–∫")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def load_layout_from_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        self.display_menu_header("–ó–ê–ì–†–£–ó–ö–ê –†–ê–°–ö–õ–ê–î–ö–ò –ò–ó –§–ê–ô–õ–ê")
        
        file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–∞—Å–∫–ª–∞–¥–∫–∏: ").strip()
        if not file_path:
            print("‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        try:
            layout = read_kl(file_path)
            if layout is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É –∏–∑ —Ñ–∞–π–ª–∞")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É
            from scan_module.read_layout import validate_layout
            is_valid, errors = validate_layout(layout)
            
            if not is_valid:
                print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π:")
                for error in errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                    print(f"   ‚Ä¢ {error}")
                if len(errors) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫")
                
                if not self.confirm_action("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π?"):
                    return
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            layout_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏: ").strip()
            if not layout_name:
                layout_name = f"imported_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            if self.confirm_action(f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É '{layout_name}' –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?"):
                self._save_layout_to_db(layout, layout_name)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É
            self.current_layout = layout
            self.current_layout_name = layout_name
            
            print(f"‚úÖ –†–∞—Å–∫–ª–∞–¥–∫–∞ '{layout_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è")
            print(f"üìä –°–æ–¥–µ—Ä–∂–∏—Ç {len(layout)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∏: {e}")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def _save_layout_to_db(self, layout: dict, layout_name: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import sqlite3
            conn = sqlite3.connect("database.db")
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
            cursor.execute("DELETE FROM lk WHERE name_lk = ?", (layout_name,))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É
            for symbol, error_value in layout.items():
                cursor.execute(
                    "INSERT INTO lk (name_lk, letter, error) VALUES (?, ?, ?)",
                    (layout_name, symbol, error_value)
                )
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –†–∞—Å–∫–ª–∞–¥–∫–∞ '{layout_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –≤ –ë–î: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é"""
        print("üê≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TEAM RATS Keyboard Layout Analyzer!")
        
        try:
            while True:
                action = self.main_menu()
                if action == MenuAction.EXIT:
                    break
                    
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        print("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    init_tables()
    make_mok_data("a", "test_en")
    menu_system = MenuSystem()
    menu_system.run()

if __name__ == "__main__":
    main()
